import {
  Alert,
  AlertColor,
  Button,
  Card,
  CardActions,
  CardContent,
  CardMedia,
  Container,
  Grid,
  Modal,
  Snackbar,
  Typography,
} from '@mui/material';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { CadastrarEditarLivro } from '../components/cadastrar-livro/cadastrar-editar-livro';
import { ExcluirLivro } from '../components/excluir-livro/excluir-livro';
import { ApiConstants } from '../constants/api.constants';
import { Livro } from '../models/Livro';
import styles from '../styles/Home.module.scss';

type SnackBarState = {
  open: boolean;
  message: string;
  severity?: AlertColor;
};

export default function Home() {
  const [livros, setLivros] = useState<Array<Livro>>([]);
  const [modalCadastroAberto, setModalCadastroAberto] = useState(false);
  const [livroSendoEditado, setLivroSendoEditado] = useState<null | Livro>(
    null
  );
  const [livroSendoExcluido, setLivroSendoExcluido] = useState<null | Livro>(
    null
  );
  const [snackbarState, setSnackbarState] = useState<SnackBarState>({
    open: false,
    message: '',
  });

  function abrirModalCadastro() {
    setModalCadastroAberto(true);
  }

  function fecharModalCadastro() {
    setModalCadastroAberto(false);
  }

  function abrirModalEditar(livro: Livro) {
    setLivroSendoEditado(livro);
  }

  function fecharModalEditar() {
    setLivroSendoEditado(null);
  }

  function abrirModalExcluir(livro: Livro) {
    setLivroSendoExcluido(livro);
  }

  function fecharModalExcluir() {
    setLivroSendoExcluido(null);
  }

  function abrirSnackbar(mensagem: string, severity?: AlertColor) {
    setSnackbarState({
      open: true,
      message: mensagem,
      severity,
    });
  }

  function fecharSnackbar() {
    setSnackbarState({
      open: false,
      message: '',
    });
  }

  async function buscarLivros() {
    const response = await fetch(ApiConstants.API_LIVROS);
    const livros = await response.json();
    setLivros(livros);
  }

  useEffect(() => {
    buscarLivros();
  }, []);

  return (
    <>
      <Head>
        <title>Livros</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container className={styles.container} maxWidth="md">
        <h1 className={styles.titulo}>Livros</h1>
        <div className={styles.cadastrarButton}>
          <Button variant="outlined" onClick={() => abrirModalCadastro()}>
            {' '}
            Cadastrar novo livro{' '}
          </Button>
        </div>
        <Grid container spacing={2}>
          {livros.map((livro) => (
            <Grid key={livro.id} item xs={12} sm={6} md={4}>
              <Card className={styles['card']}>
                {livro.imagem ? (
                  <CardMedia
                    component="img"
                    alt={`capa do livro ${livro.titulo}`}
                    height="140"
                    image={livro.imagem}
                  />
                ) : null}
                <CardContent className={styles['card-content']}>
                  <Typography gutterBottom variant="h5" component="div">
                    {livro.titulo}
                  </Typography>
                  <Typography
                    className={styles.descricaoCard}
                    variant="body2"
                    color="text.secondary"
                  >
                    {livro.descricao}
                  </Typography>
                  <Typography variant="caption" color="text.secondary">
                    Autor(a): {livro.autor} | Ano: {livro.ano} | Editora:{' '}
                    {livro.editora}
                  </Typography>
                </CardContent>
                <CardActions className={styles['card-actions']}>
                  <Button
                    variant="outlined"
                    color="primary"
                    size="small"
                    onClick={() => abrirModalEditar(livro)}
                  >
                    Editar
                  </Button>
                  <Button
                    variant="outlined"
                    color="error"
                    size="small"
                    onClick={() => abrirModalExcluir(livro)}
                  >
                    Excluir
                  </Button>
                </CardActions>
              </Card>
            </Grid>
          ))}
        </Grid>
      </Container>

      <Modal closeAfterTransition open={modalCadastroAberto}>
        <CadastrarEditarLivro
          abrirSnackbar={abrirSnackbar}
          onClose={fecharModalCadastro}
          onAtualizarLista={buscarLivros}
        />
      </Modal>
      <Modal closeAfterTransition open={!!livroSendoEditado}>
        <CadastrarEditarLivro
          abrirSnackbar={abrirSnackbar}
          onClose={fecharModalEditar}
          onAtualizarLista={buscarLivros}
          editandoLivro={livroSendoEditado!}
        />
      </Modal>
      <Modal closeAfterTransition open={!!livroSendoExcluido}>
        <ExcluirLivro
          abrirSnackbar={abrirSnackbar}
          onClose={fecharModalExcluir}
          onAtualizarLista={buscarLivros}
          livro={livroSendoExcluido!}
        />
      </Modal>

      <Snackbar
        onClose={fecharSnackbar}
        open={snackbarState.open}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert severity={snackbarState.severity}>{snackbarState.message}</Alert>
      </Snackbar>
    </>
  );
}
